import flanagan.math.Fmath;
import java.lang.Math;
import java.awt.*;
import java.awt.event.*;

public class BasicNet
	{
	private int numInputs, numOutputs, numHidden;
	private double[] hiddenSums, totalWeightsHO;
	private double LR_IH, LR_HO;
	private double[][] weightsIH, weightsHO;
	
	
	// Constructor for a neural network
	// Called by BasicNet a = new BasicNet(numin, numout, numhidden, lrtop, lrbot);
	public BasicNet(int thenumInputs, int thenumOutputs, int thenumHidden, double theLR_IH, double theLR_HO)
		{
		numInputs = thenumInputs;
		numOutputs = thenumOutputs;
		numHidden = thenumHidden;
		LR_IH = theLR_IH;
		LR_HO = theLR_HO;
		weightsIH = new double[numInputs][numHidden];
		weightsHO = new double[numHidden][numOutputs];
		hiddenSums = new double[numHidden];
		initWeights();
		}
		
	
	// Initialize the weights of the weight tables to random values.
	// QUESTION Why are we using different random values here?
	public void initWeights()
		{
		for(int i = 0; i < numInputs; i++)
			for(int j = 0; j < numHidden; j++)
				weightsIH[i][j] = (Math.random() - 0.5);///5;
		for(int i = 0; i < numHidden; i++)
			for(int j = 0; j < numOutputs; j++)
				weightsHO[i][j] = (Math.random() - 0.5);///2;
		}
		

	
	// The tanh function
/*	public double tanh(double x)
		{
		if(x > 20)
			return 1;
    	else if (x < -20)
			return -1;
		else
			{
			double a = Math.exp(x);
			double b = Math.exp(-x);
			return (a-b)/(a+b);
			}
		}
*/
		
	// Given a set of inputs (numInputs values in inputArray), 
	//    return a set of outputs (numOutputs values in outputArray)
	public double[] stimulate(double[] inputArray)
		{
		double[] outputArray = new double[100];
		for(int i = 0; i < numOutputs; i++)
			outputArray[i] = 0;
		
		
		for(int hiddenNode = 0; hiddenNode < numHidden; hiddenNode++)
			{
			for(int inputNode = 0; inputNode < numInputs; inputNode++)
				hiddenSums[hiddenNode] = hiddenSums[hiddenNode] + inputArray[inputNode]*weightsIH[inputNode][hiddenNode];
			hiddenSums[hiddenNode] = Fmath.tanh(hiddenSums[hiddenNode]);
			}
		
		for(int outputNode = 0; outputNode < numOutputs; outputNode++)
			{
			for(int hiddenNode = 0; hiddenNode < numHidden; hiddenNode++)
				outputArray[outputNode] = outputArray[outputNode] + hiddenSums[hiddenNode]*weightsHO[hiddenNode][outputNode];
			outputArray[outputNode] = Fmath.tanh(outputArray[outputNode]);
			}
		
		return outputArray;
		}
	}
	
public void updateWeights(double[] targetArray, double[] outputArray)
	{
	double totalError = 0.0;
	for(int i = 0; i < numOutputs; i++)
		{
		double localError = (targetArray[i]-outputArray[i])*(targetArray[i]-outputArray[i]);
		totalError += localError/2;
		}
	totalError = totalError/2;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
