/*MusicWheel is copyright Shawn T. O'Neil 2013. Source code is LGPL. If you use it, maybe give me a shoutout?

This file is part of MusicWheel.

    MusicWheel is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Foobar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with MusicWheel.  If not, see <http://www.gnu.org/licenses/>.
*/

/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void scaleDroplist_click1(GDropList source, GEvent event) { //_CODE_:scaleDroplist:707967:
  setUpdateRed();
  //setInstrumentScale(instrumentDroplist.getSelectedText(), noteDroplist.getSelectedText(), scaleDroplist.getSelectedText()); 

} //_CODE_:scaleDroplist:707967:

public void noteDroplist_click1(GDropList source, GEvent event) { //_CODE_:noteDroplist:670313:
  setUpdateRed();
  //setInstrumentScale(instrumentDroplist.getSelectedText(), noteDroplist.getSelectedText(), scaleDroplist.getSelectedText()); 
} //_CODE_:noteDroplist:670313:

public void instrumentDroplist_click1(GDropList source, GEvent event) { //_CODE_:instrumentDroplist:276246:
  setUpdateRed();
  //setInstrumentScale(instrumentDroplist.getSelectedText(), noteDroplist.getSelectedText(), scaleDroplist.getSelectedText()); 
} //_CODE_:instrumentDroplist:276246:

public void updateButton_click1(GButton source, GEvent event) { //_CODE_:updateButton:231287:
  if(event == GEvent.PRESSED) {
    setUpdateCustom();
    setInstrumentScale(instrumentDroplist.getSelectedText(), noteDroplist.getSelectedText(), scaleDroplist.getSelectedText()); 
  }
} //_CODE_:updateButton:231287:

public void byFifthsCheckbox_clicked1(GCheckbox source, GEvent event) { //_CODE_:byFifthsCheckbox:433339:
  if(source.isSelected()) {
    setVisByFifths(true);
  }
  else {
    setVisByFifths(false);
  }
} //_CODE_:byFifthsCheckbox:433339:

public void helpPanel_Click1(GPanel source, GEvent event) { //_CODE_:helpPanel:363142:
} //_CODE_:helpPanel:363142:

public void textarea2_change1(GTextArea source, GEvent event) { //_CODE_:textarea2:658800:
} //_CODE_:textarea2:658800:

public void playHighlightedNotes_click1(GButton source, GEvent event) { //_CODE_:playHighlightedNotes:422701:
  HashMap<String,Integer> currentlyPlaying = musicMaker.getCurrentlyPlayingNotes();
  for(String note : currentlyPlaying.keySet()) {
    currentInstrument.playNote(note);
  }
} //_CODE_:playHighlightedNotes:422701:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.CYAN_SCHEME);
  G4P.setCursor(ARROW);
  if(frame != null)
    frame.setTitle("Sketch Window");
  instrumentDroplist = new GDropList(this, 470, 20, 120, (4+1)*18, 4);
  instrumentDroplist.setItems(loadStrings("list_276246"), 0);
  instrumentDroplist.setLocalColorScheme(GCScheme.BLUE_SCHEME);
  instrumentDroplist.addEventHandler(this, "instrumentDroplist_click1");
  noteDroplist = new GDropList(this, 470, 50, 120, (12+1)*18, 12);
  noteDroplist.setItems(loadStrings("list_670313"), 3);
  noteDroplist.setLocalColorScheme(GCScheme.BLUE_SCHEME);
  noteDroplist.addEventHandler(this, "noteDroplist_click1");
  scaleDroplist = new GDropList(this, 470, 80, 120, (5+1)*18, 5);
  scaleDroplist.setItems(loadStrings("list_707967"), 0);
  scaleDroplist.setLocalColorScheme(GCScheme.BLUE_SCHEME);
  scaleDroplist.addEventHandler(this, "scaleDroplist_click1");
  updateButton = new GButton(this, 500, 120, 70, 20);
  updateButton.setText("Update");
  updateButton.setLocalColorScheme(GCScheme.BLUE_SCHEME);
  updateButton.addEventHandler(this, "updateButton_click1");
  byFifthsCheckbox = new GCheckbox(this, 470, 160, 120, 20);
  byFifthsCheckbox.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  byFifthsCheckbox.setText("Circle of Fifths");
  byFifthsCheckbox.setTextBold();
  byFifthsCheckbox.setLocalColorScheme(GCScheme.BLUE_SCHEME);
  byFifthsCheckbox.setOpaque(false);
  byFifthsCheckbox.addEventHandler(this, "byFifthsCheckbox_clicked1");
  helpPanel = new GPanel(this, 510, 330, 390, 340, "More Help");
  helpPanel.setCollapsed(true);
  helpPanel.setText("More Help");
  helpPanel.setLocalColorScheme(GCScheme.BLUE_SCHEME);
  helpPanel.setOpaque(true);
  helpPanel.addEventHandler(this, "helpPanel_Click1");
  textarea2 = new GTextArea(this, 10, 30, 370, 300, G4P.SCROLLBARS_VERTICAL_ONLY);
  textarea2.setLocalColorScheme(GCScheme.BLUE_SCHEME);
  textarea2.setOpaque(true);
  textarea2.addEventHandler(this, "textarea2_change1");
  helpPanel.addControl(textarea2);
  playHighlightedNotes = new GButton(this, 20, 360, 100, 20);
  playHighlightedNotes.setText("Play Selected");
  playHighlightedNotes.addEventHandler(this, "playHighlightedNotes_click1");
}

// Variable declarations 
// autogenerated do not edit
GDropList scaleDroplist; 
GDropList noteDroplist; 
GDropList instrumentDroplist; 
GButton updateButton; 
GCheckbox byFifthsCheckbox; 
GPanel helpPanel; 
GTextArea textarea2; 
GButton playHighlightedNotes; 

