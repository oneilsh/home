Listing treemethods.cpp...

//CS222 Program 4, Binary search tree with delete
//Shawn O'Neil
#include <iostream>
#include <string>
#include "tree1.h"
using namespace std;

#define EMPTYTREE 1
#define DUPLICATE 2
#define NOMATCH 3
#define OUTRANGE 4
#define NONONZERO 5

//tree constructor
Tree::Tree()
	{
	root = NULL;
	}

//tree destructor
Tree::~Tree()
	{
	delete root;
	}

//adds a node to the tree
void Tree::add(string name)
	{
	if(root == NULL)
		{
		root = new Node();
		root->setname(name);
		root->setparent(NULL);
		}
	else
		root->add(name);
	}

//sets a grade for the node of thename
void Tree::grade(int number, double score, string thename)
	{
	if(number != 1 && number != 2 && number != 3 && number != 4 && number != 5)
		throw OUTRANGE;
	if(score < 0)
		throw OUTRANGE;
	else if(root != NULL)
		root->grade(number, score, thename);
	else
		throw EMPTYTREE;
	}

//prints the tree
void Tree::print()
	{
	if(root != NULL)
		root->print();
	else
		throw EMPTYTREE;
	}

//deletes a node from the tree, with the name of name
void Tree::del(string name)
	{
	if(root != NULL)
		root->del(name, root);
	else
		throw EMPTYTREE;
	}

//gets the mean of all the nonzero particular exams in the tree
double Tree::mean(int exam)
	{
	if(exam != 1 && exam != 2 && exam != 3 && exam != 4 && exam != 5)
		throw OUTRANGE;
	else if(root != NULL)
		{
		double total =  root->gettotal(exam);
		double number = root->getnumber(exam);
		if(number != 0)
			return total/number;
		else
			throw NONONZERO;
		}
	else
		throw EMPTYTREE;
	}

//checks to see if the tree is empty. dont think its actually used...
bool Tree::empty()
	{
	return root == NULL;
	}

//node constructor
Node::Node()
	{
	parent = left = right = NULL;
	grade1 = grade2 = grade3 = grade4 = grade5 = 0;
	}

//node destructor
Node::~Node()
	{
	if(left != NULL)
		delete left;
	if(right != NULL)
		delete right;
	//cout << "destructing: " << name << endl;
	}

//adds a name to the tree
void Node::add(string thename)
	{
	if(name != thename)
		{
		if(thename < name)
			{
			if(left != NULL)
				left->add(thename);
			else
				{
				left = new Node();
				left->setparent(this);
				left->setname(thename);
				}
			}
		else
			{
			if(right != NULL)
				right->add(thename);
			else
				{
				right = new Node();
				right->setparent(this);
				right->setname(thename);
				}
			}
		}
	else
		throw DUPLICATE;
	}

//sets the node n as a child of the current node
void Node::resetchild(Node *n)
	{
	string thename = n->getname();
	n->setparent(this);
	if(thename < name)
		left = n;
	else
		right = n;
	}

//sets the child with the name thename to null. used when deleting a node
void Node::setchildtonull(string thename)
	{
	//cout << "setting " << thename << " to null. left is " << endl;// left->getname() << " right is " << right->getname() << endl;
	if(left != NULL)
		if(left->getname() == thename)
			left = NULL;
	if(right != NULL)
		if(right->getname() == thename)
			right = NULL;
	}

//returns the name
string Node::getname()
	{
	return name;
	}

//returns a particular grade
double Node::getgrade(int number)
	{
	if(number == 1)
		return grade1;
	else if(number == 2)
		return grade2;
	else if(number == 3)
		return grade3;
	else if(number == 4)
		return grade4;
	else
		return grade5;

	}

//gets total number of nodes with nonzero grades from this point down
double Node::getnumber(int exam)
	{
	double total = 0;
	if(exam == 1 && grade1 != 0)
		total += 1;
	else if(exam == 2 && grade2 != 0)
		total += 1;
	else if(exam == 3 && grade3 != 0)
		total += 1;
	else if(exam == 4 && grade4 != 0)
		total += 1;
	else if(exam == 5 && grade5 != 0)
		total += 1;
	if(left != NULL)
		total = total + left->getnumber(exam);
	if(right != NULL)
		total = total + right->getnumber(exam);
	return total;
	}

//gets total of the grades for exam number exam from this point down
double Node::gettotal(int exam)
	{
	double mytotal = 0;
	if(exam == 1)
		mytotal = mytotal + grade1;
	else if(exam == 2)
		mytotal = mytotal + grade2;
	else if(exam == 3)
		mytotal = mytotal + grade3;
	else if(exam == 4)
		mytotal = mytotal + grade4;
	else if(exam == 5)
		mytotal = mytotal + grade5;
	if(left != NULL)
		mytotal = mytotal + left->gettotal(exam);
	if(right != NULL)
		mytotal = mytotal + right->gettotal(exam);
	return mytotal;
	}

//this is used to get the immediate successor of a node, short version used by delete
Node * Node::slideleft()
	{
	if(left == NULL)
		return this;
	else
		return left->slideleft();
	}

//deletes a node from the tree. if the node we want to delete is the parent,
//then it usees *&root  to set the root of the tree
void Node::del(string thename, Node *&root)
	{
	if(name == thename)
		{
		if(left == NULL && right == NULL)
			{
			if(parent != NULL)
				{
				parent->setchildtonull(name);
				}
			else
				root = NULL;
			delete this;
			}
		else if(left == NULL)
			{
			if(parent != NULL)
				{
				Node *q = parent;
				q->resetchild(right);
				}
			else
				{
				root = right;
				}
			right = NULL;
			delete this;
			}
		else if(right == NULL)
			{
			if(parent != NULL)
				{
				Node *q = parent;
				q->resetchild(left);
				}
			else
				{
				root = left;
				}
			left = NULL;
			delete this;
			}
		else
			{
			Node *p = right->slideleft();
			name = p->getname();
			grade1 = p->getgrade(1);
			grade2 = p->getgrade(2);
			grade3 = p->getgrade(3);
			grade4 = p->getgrade(4);
			grade5 = p->getgrade(5);
			p->del(p->getname(),root);
			}
		}
	else
		{
		if(thename < name)
			{
			if(left == NULL)
				throw NOMATCH;
			else
				left->del(thename, root);
			}
		else
			{
			if(right == NULL)
				throw NOMATCH;
			else
				right->del(thename, root);
			}
		}
	}

//sets the parent node
void Node::setparent(Node *n)
	{
	parent = n;
	}

//sets the name, duh
void Node::setname(string thename)
	{
	name = thename;
	}

//Returns the mean of all the nonzero scores on a particular test from this point down
double Node::mean(int exam)
	{
	double leftmean = 0;
	double rightmean = 0;
	double memean = 0;

	if(exam == 1)
		memean = grade1;
	else if(exam == 2)
		memean = grade2;
	else if(exam == 3)
		memean = grade3;
	else if(exam == 4)
		memean = grade4;
	else if(exam == 5)
		memean = grade5;

	if(right != NULL)
		rightmean = right->mean(exam);
	if(left != NULL)
		leftmean = left->mean(exam);

	int count = 0;
	if(leftmean != 0)
		count++;
	if(rightmean != 0)
		count++;
	if(memean != 0)
		count++;

	if(count == 0)
		return 0;
	return (leftmean+rightmean+memean)/count;
	}

// Sets the grade for a particular test for the node.
void Node::grade(int number, double score, string thename)
	{
	if(name == thename)
		{
		if(number == 1)
			grade1 = score;
		else if(number == 2)
			grade2 = score;
		else if(number == 3)
			grade3 = score;
		else if(number == 4)
			grade4 = score;
		else if(number == 5)
			grade5 = score;
		}
	else if(thename < name)
		{
		if(left != NULL)
			left->grade(number, score, thename);
		else
			throw NOMATCH;
		}
	else
		{
		if(right != NULL)
			right->grade(number, score, thename);
		else
			throw NOMATCH;
		}
	}

//Print method for the node, inorder. Prints name, and grades.
void Node::print()
	{
	if(left != NULL)
		left->print();
	cout << name << " : " << grade1 << " , " << grade2 << " , " << grade3 << " , " << grade4 << " , " << grade5 << endl;
	if(right != NULL)
		right->print();
	}

int mainf(int argc, char ** argv)
	{
	cout << "Happy birthday euclid." << endl;
	Tree t;
	string action;
	int number;
	double grade;
	string name;
	while(cin >> action, cin)
		{
		cin.ignore();
		if(action == "ADD")
			{
			getline(cin, name);
			try
				{
				t.add(name);
				cout << "Successfully added " << name << "." << endl;
				cout << endl;
				}
			catch(int e)
				{
				if(e == NOMATCH)
					cout << "Could not add, ERROR" << endl;
				else if(e == EMPTYTREE)
					cout << "Could nto add, ERROR" << endl;
				else if(e == DUPLICATE)
					cout << "Could not add " << name << ". Name already exists." << endl;
				else if(e == OUTRANGE)
					cout << "Could not add, ERROR" << endl;
				cout << endl;
				}
			}

		else if(action == "PRINT")
			{
			try
				{
			//	cout << endl;
				cout << "Statistics: " << endl;
				t.print();
				cout << endl;
				}
			catch(int e)
				{
				if(e == NOMATCH)
					cout << "Could not print, ERROR" << endl;
				else if(e == EMPTYTREE)
					cout << "Database Empty, could not print." << endl;
				else if(e == DUPLICATE)
					cout << "Could not print, ERROR" << endl;
				else if(e == OUTRANGE)
					cout << "Could not print, ERROR" << endl;
				cout << endl;
				}
			}

		else if(action == "GRADE")
			{
			cin >> number;
			cin.ignore();
			cin >> grade;
			cin.ignore();
			getline(cin, name);
			try
				{
				t.grade(number, grade, name);
				cout << "Set " << name << "'s grade on test " << number << " to " << grade << "." << endl;
				cout << endl;
				}
			catch(int e)
				{
				if(e == NOMATCH)
					cout << "Could not grade " << name << ", no match in database." << endl;
				else if(e == EMPTYTREE)
					cout << "Could not grade " << name << ", database empty" << endl;
				else if(e == DUPLICATE)
					cout << "Could not grade, ERROR" << endl;
				else if(e == OUTRANGE)
					cout << "Could not grade " << name << ", test number or grade out of range" << endl;
				cout << endl;
				}
			}

		else if(action == "DELETE")
			{
			getline(cin, name);
			try
				{
				t.del(name);
				cout << "Successfully deleted " << name << "." << endl;
				cout << endl;
				}
			catch(int e)
				{
				if(e == NOMATCH)
					cout << "Could not delete " << name << ", no match in database." << endl;
				else if(e == EMPTYTREE)
					cout << "Could not delete " << name << ", database empty" << endl;
				else if(e == DUPLICATE)
					cout << "Could not delete, ERROR" << endl;
				else if(e == OUTRANGE)
					cout << "Could not delete " << name << ", test number out of range ERROR" << endl;
				cout << endl;
				}
			}

		else if(action == "MEAN")
			{
			cin >> number;
			try
				{
				double mean = t.mean(number);
				if(mean != 0)
					cout << "The mean on test " << number << " is " << t.mean(number) << endl;
				else
					cout << "There are no nonzero means in the database for test " << number << endl;
				cout << endl;
				}
			catch(int e)
				{
				if(e == NOMATCH)
					cout << "Could not get mean for test " << number << ", no match in database ERROR" << endl;
				else if(e == EMPTYTREE)
					cout << "Could not get mean for test " << number << ", database empty" << endl;
				else if(e == DUPLICATE)
					cout << "Could not get mean, ERROR" << endl;
				else if(e == OUTRANGE)
					cout << "Could not get mean for test " << number << ", test number out of range." << endl;
				else if(e == NONONZERO)
					cout << "Could not get mean for test " << number << ", no nonzero grades in database." << endl;
				cout << endl;
				}
			}

		}
	cout << "Bye, thanks for using." << endl;
	}


Compiling treemethods.cpp...

treemethods.cpp: In function `int mainf(int, char **)':
treemethods.cpp:541: warning: control reaches end of non-void function `mainf(int, char **)'


Executing treemethods.exe...

Happy birthday euclid.
Statistics: 
Database Empty, could not print.

Successfully added Kingston, David W..

Successfully deleted Kingston, David W..

Statistics: 
Database Empty, could not print.

Successfully added Kingston, David W..

Successfully added Desjardins, Patricia L..

Successfully added Slotterback, Floyd H..

Successfully added Rousseau, Stephanie A..

Successfully added Devine, Bonnie E..

Successfully added Fjeldheim, Sten J..

Successfully added Graves, Brent, The Biology Guy.

Could not add Graves, Brent, The Biology Guy. Name already exists.

Could not add Kingston, David W.. Name already exists.

Could not add Devine, Bonnie E.. Name already exists.

Statistics: 
Desjardins, Patricia L. : 0 , 0 , 0 , 0 , 0
Devine, Bonnie E. : 0 , 0 , 0 , 0 , 0
Fjeldheim, Sten J. : 0 , 0 , 0 , 0 , 0
Graves, Brent, The Biology Guy : 0 , 0 , 0 , 0 , 0
Kingston, David W. : 0 , 0 , 0 , 0 , 0
Rousseau, Stephanie A. : 0 , 0 , 0 , 0 , 0
Slotterback, Floyd H. : 0 , 0 , 0 , 0 , 0

Could not get mean for test 1, no nonzero grades in database.

Could not get mean for test 2, no nonzero grades in database.

Could not get mean for test 3, no nonzero grades in database.

Could not get mean for test 4, no nonzero grades in database.

Could not get mean for test 5, no nonzero grades in database.

Successfully deleted Fjeldheim, Sten J..

Could not delete Fjeldheim, Sten J., no match in database.

Successfully added Fjeldheim, Sten J..

Successfully deleted Fjeldheim, Sten J..

Statistics: 
Desjardins, Patricia L. : 0 , 0 , 0 , 0 , 0
Devine, Bonnie E. : 0 , 0 , 0 , 0 , 0
Graves, Brent, The Biology Guy : 0 , 0 , 0 , 0 , 0
Kingston, David W. : 0 , 0 , 0 , 0 , 0
Rousseau, Stephanie A. : 0 , 0 , 0 , 0 , 0
Slotterback, Floyd H. : 0 , 0 , 0 , 0 , 0

Set Devine, Bonnie E.'s grade on test 1 to 83.

Could not grade Fjeldheim, Sten J., no match in database.

Set Slotterback, Floyd H.'s grade on test 1 to 100.

Set Desjardins, Patricia L.'s grade on test 1 to 23.

Set Devine, Bonnie E.'s grade on test 1 to 88.

Statistics: 
Desjardins, Patricia L. : 23 , 0 , 0 , 0 , 0
Devine, Bonnie E. : 88 , 0 , 0 , 0 , 0
Graves, Brent, The Biology Guy : 0 , 0 , 0 , 0 , 0
Kingston, David W. : 0 , 0 , 0 , 0 , 0
Rousseau, Stephanie A. : 0 , 0 , 0 , 0 , 0
Slotterback, Floyd H. : 100 , 0 , 0 , 0 , 0

The mean on test 1 is 70.3333

Could not grade Devine Bonnie E, no match in database.

Could not get mean for test 4, no nonzero grades in database.

Set Kingston, David W.'s grade on test 4 to 100.

The mean on test 4 is 100

Could not grade Kingston, David W., test number or grade out of range

The mean on test 4 is 100

Could not grade Kingston, David W., test number or grade out of range

Could not grade Kingston, David W., test number or grade out of range

Could not get mean for test 0, test number out of range.

Could not get mean for test 6, test number out of range.

Statistics: 
Desjardins, Patricia L. : 23 , 0 , 0 , 0 , 0
Devine, Bonnie E. : 88 , 0 , 0 , 0 , 0
Graves, Brent, The Biology Guy : 0 , 0 , 0 , 0 , 0
Kingston, David W. : 0 , 0 , 0 , 100 , 0
Rousseau, Stephanie A. : 0 , 0 , 0 , 0 , 0
Slotterback, Floyd H. : 100 , 0 , 0 , 0 , 0

Successfully added Appleton, Randy.

Successfully added Horn, Jeff.

Successfully added Poe, Andy.

Statistics: 
Appleton, Randy : 0 , 0 , 0 , 0 , 0
Desjardins, Patricia L. : 23 , 0 , 0 , 0 , 0
Devine, Bonnie E. : 88 , 0 , 0 , 0 , 0
Graves, Brent, The Biology Guy : 0 , 0 , 0 , 0 , 0
Horn, Jeff : 0 , 0 , 0 , 0 , 0
Kingston, David W. : 0 , 0 , 0 , 100 , 0
Poe, Andy : 0 , 0 , 0 , 0 , 0
Rousseau, Stephanie A. : 0 , 0 , 0 , 0 , 0
Slotterback, Floyd H. : 100 , 0 , 0 , 0 , 0

Successfully deleted Devine, Bonnie E..

Successfully deleted Appleton, Randy.

Successfully deleted Slotterback, Floyd H..

The mean on test 1 is 23

Statistics: 
Desjardins, Patricia L. : 23 , 0 , 0 , 0 , 0
Graves, Brent, The Biology Guy : 0 , 0 , 0 , 0 , 0
Horn, Jeff : 0 , 0 , 0 , 0 , 0
Kingston, David W. : 0 , 0 , 0 , 100 , 0
Poe, Andy : 0 , 0 , 0 , 0 , 0
Rousseau, Stephanie A. : 0 , 0 , 0 , 0 , 0

Successfully added KJQKE.

Successfully added MEAEE.

Successfully added SBGMV.

Successfully added UGZCF.

Successfully added ALVKM.

Successfully added IASYH.

Successfully added QLTSW.

Successfully added LAACW.

Successfully added GPAJS.

Successfully added NRLYS.

Successfully added KRBVJ.

Successfully added JZRPW.

Successfully added STMVF.

Successfully added MMOXV.

Successfully added QFINB.

Successfully added ENDDV.

Successfully added VTZTF.

Successfully added PVGZG.

Successfully added WGOZH.

Successfully added MEFSC.

Successfully added FULLU.

Successfully added FHXFP.

Successfully added LKAOI.

Successfully added FXHRE.

Successfully added HGXMY.

Successfully added SVZRU.

Successfully added TPNDA.

Successfully added EXNVT.

Successfully added XIPXV.

Successfully added PDFXH.

Successfully added ZGRKV.

Successfully added DWQYQ.

Successfully added RMBBT.

Successfully added NXLHQ.

Successfully added SMAAY.

Successfully added YGRYB.

Successfully added PKKGI.

Successfully added BXVTQ.

Successfully added CHFZF.

Successfully added SFMAX.

Successfully added DINFX.

Successfully added NJZOX.

Successfully added PMQKY.

Successfully added UXWAZ.

Successfully added RJVLA.

Successfully added YRJKQ.

Successfully added CJOEG.

Successfully added KBSKU.

Successfully added DCFUC.

Successfully added NKHZU.

Successfully added UUDZP.

Successfully added KXMWQ.

Successfully added FOOUU.

Successfully added ZPTIW.

Successfully added EVACK.

Successfully added FUMDP.

Successfully added OXAJP.

Successfully added DRWYU.

Successfully added TATTE.

Successfully added XJOXW.

Successfully added CGEMR.

Successfully added GWZDM.

Successfully added LMSNG.

Successfully added PNSMZ.

Successfully added SCTCV.

Successfully added PGHMC.

Successfully added RIEQB.

Successfully added FMPBC.

Successfully added HGRTM.

Successfully added DDYHW.

Successfully added DJCOD.

Successfully added HMZJQ.

Successfully added EELZX.

Successfully added EZYMP.

Successfully added OIZOO.

Successfully added MAKDU.

Successfully added EOHSO.

Successfully added TJACS.

Successfully added ZWNJA.

Successfully added FUHOI.

Successfully added SEVVC.

Successfully added AMRUZ.

Successfully added TWCUU.

Successfully added DGJWB.

Successfully added PZPVE.

Successfully added HDZYV.

Successfully added JUXVY.

Successfully added BKVTS.

Successfully added ZJLXT.

Successfully added OXNSI.

Successfully added WYLDB.

Successfully added PNZNY.

Successfully added GJSLY.

Successfully added JFMQU.

Successfully added QXGJX.

Successfully added YHTXD.

Successfully added FEQFX.

Successfully added AOGFS.

Successfully added JFVPX.

Successfully added HMDHU.

Successfully deleted LMSNG.

Successfully deleted NJZOX.

Successfully deleted ZPTIW.

Successfully deleted ZGRKV.

Successfully deleted LAACW.

Successfully deleted UUDZP.

Successfully deleted FXHRE.

Successfully deleted NRLYS.

Successfully deleted ZWNJA.

Successfully deleted ALVKM.

Successfully deleted EOHSO.

Successfully deleted QXGJX.

Successfully deleted MEAEE.

Successfully deleted TJACS.

Successfully deleted BXVTQ.

Successfully deleted KRBVJ.

Successfully deleted NKHZU.

Successfully deleted TWCUU.

Successfully deleted BKVTS.

Successfully deleted RIEQB.

Successfully deleted PGHMC.

Successfully deleted JZRPW.

Successfully deleted FOOUU.

Successfully deleted DINFX.

Successfully deleted UXWAZ.

Successfully deleted SEVVC.

Successfully deleted SMAAY.

Successfully deleted PNZNY.

Successfully deleted PKKGI.

Successfully deleted FHXFP.

Successfully deleted QLTSW.

Successfully deleted WYLDB.

Successfully deleted SCTCV.

Successfully deleted HDZYV.

Successfully deleted ZJLXT.

Successfully deleted RJVLA.

Successfully deleted NXLHQ.

Successfully deleted EVACK.

Successfully deleted OXNSI.

Successfully deleted KJQKE.

Successfully deleted YRJKQ.

Successfully deleted FUHOI.

Successfully deleted EELZX.

Successfully deleted GJSLY.

Successfully deleted ENDDV.

Successfully deleted EZYMP.

Successfully deleted OIZOO.

Successfully deleted KXMWQ.

Successfully deleted SVZRU.

Successfully deleted PZPVE.

Successfully deleted HMZJQ.

Successfully deleted KBSKU.

Successfully deleted DWQYQ.

Successfully deleted DCFUC.

Successfully deleted YGRYB.

Successfully deleted TATTE.

Successfully deleted PDFXH.

Successfully deleted CHFZF.

Successfully deleted MMOXV.

Successfully deleted JUXVY.

Successfully deleted CGEMR.

Successfully deleted MEFSC.

Successfully deleted MAKDU.

Successfully deleted STMVF.

Successfully deleted JFVPX.

Successfully deleted JFMQU.

Successfully deleted OXAJP.

Successfully deleted FEQFX.

Successfully deleted DRWYU.

Successfully deleted SBGMV.

Successfully deleted XIPXV.

Successfully deleted DJCOD.

Successfully deleted UGZCF.

Successfully deleted IASYH.

Successfully deleted PNSMZ.

Successfully deleted SFMAX.

Successfully deleted LKAOI.

Successfully deleted CJOEG.

Successfully deleted HGXMY.

Successfully deleted TPNDA.

Successfully deleted AMRUZ.

Successfully deleted YHTXD.

Successfully deleted GPAJS.

Successfully deleted VTZTF.

Successfully deleted QFINB.

Successfully deleted DDYHW.

Successfully deleted FUMDP.

Successfully deleted FULLU.

Successfully deleted AOGFS.

Successfully deleted FMPBC.

Successfully deleted GWZDM.

Successfully deleted WGOZH.

Successfully deleted HMDHU.

Successfully deleted EXNVT.

Successfully deleted PVGZG.

Successfully deleted HGRTM.

Successfully deleted RMBBT.

Successfully deleted XJOXW.

Successfully deleted PMQKY.

Successfully deleted DGJWB.

Statistics: 
Desjardins, Patricia L. : 23 , 0 , 0 , 0 , 0
Graves, Brent, The Biology Guy : 0 , 0 , 0 , 0 , 0
Horn, Jeff : 0 , 0 , 0 , 0 , 0
Kingston, David W. : 0 , 0 , 0 , 100 , 0
Poe, Andy : 0 , 0 , 0 , 0 , 0
Rousseau, Stephanie A. : 0 , 0 , 0 , 0 , 0

Bye, thanks for using.

Fortify: Statistics at fmain.c.19
         Memory currently allocated: 0 bytes in 0 blocks
         Maximum memory allocated at one time: 5936 bytes in 106 blocks
         There have been 112 allocations and 112 deallocations
         There was a total of 6272 bytes allocated
         The average allocation was 56 bytes
